# Enhanced Logstash Pipeline Configuration
input {
  beats {
    port => 5044
  }
}

filter {
  # Parse Docker container logs
  if [container][name] {
    mutate {
      add_field => { "service_name" => "%{[container][name]}" }
    }
  }

  # Parse JSON from Python scripts
  if [message] =~ /^\{.*"log_type":\s*"system_monitor".*\}$/ {
    json {
      source => "message"
    }
    
    # Add metadata
    mutate {
      add_field => { "data_source" => "python_script" }
      add_field => { "environment" => "development" }
    }
    
    # Convert timestamp to proper date format
    if [timestamp] {
      date {
        match => [ "timestamp", "ISO8601" ]
        target => "@timestamp"
      }
    }
    
    # Remove unnecessary fields
    mutate {
      remove_field => ["message", "agent", "ecs", "host", "input"]
    }
  }

  # Parse Selenium script results
  if [message] =~ /^\{.*"log_type":\s*"selenium_.*".*\}$/ {
    json {
      source => "message"
    }
    
    # Add metadata for Selenium data
    mutate {
      add_field => { "data_source" => "selenium_script" }
      add_field => { "environment" => "development" }
    }
    
    # Convert timestamp
    if [timestamp] {
      date {
        match => [ "timestamp", "ISO8601" ]
        target => "@timestamp"
      }
    }
    
    # Remove unnecessary fields
    mutate {
      remove_field => ["message", "agent", "ecs", "host", "input"]
    }
  }

  # Parse Semaphore specific logs
  if [container][name] == "semaphore" {
    grok {
      match => { 
        "message" => "\[%{TIMESTAMP_ISO8601:timestamp}\] %{LOGLEVEL:level} %{GREEDYDATA:log_message}"
      }
    }
    
    # Parse task logs
    if [log][file][path] =~ /tasks\.log/ {
      mutate {
        add_field => { "log_type" => "semaphore_task" }
      }
    }
    
    # Parse event logs
    if [log][file][path] =~ /events\.log/ {
      mutate {
        add_field => { "log_type" => "semaphore_event" }
      }
    }
  }

  # Parse MySQL logs
  if [container][name] == "mysql" {
    grok {
      match => { 
        "message" => "%{TIMESTAMP_ISO8601:timestamp} %{NUMBER:thread_id} \[%{DATA:level}\] %{GREEDYDATA:log_message}"
      }
    }
    mutate {
      add_field => { "log_type" => "mysql" }
    }
  }

  # Parse Elasticsearch logs
  if [container][name] == "elasticsearch" {
    grok {
      match => { 
        "message" => "\[%{TIMESTAMP_ISO8601:timestamp}\]\[%{LOGLEVEL:level}\s*\]\[%{DATA:component}\] %{GREEDYDATA:log_message}"
      }
    }
    mutate {
      add_field => { "log_type" => "elasticsearch" }
    }
  }

  # Parse Kibana logs
  if [container][name] == "kibana" {
    json {
      source => "message"
    }
    mutate {
      add_field => { "log_type" => "kibana" }
    }
  }

  # Add common fields
  mutate {
    add_field => { "environment" => "development" }
    add_field => { "project" => "semaphore-elk" }
  }
}

output {
  # Send system monitor data to dedicated index
  if [log_type] == "system_monitor" {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "system-monitor-%{+YYYY.MM.dd}"
      template_name => "system-monitor"
      template => {
        "index_patterns" => ["system-monitor-*"],
        "settings" => {
          "number_of_shards" => 1,
          "number_of_replicas" => 0
        },
        "mappings" => {
          "properties" => {
            "@timestamp" => { "type" => "date" },
            "timestamp" => { "type" => "date" },
            "hostname" => { "type" => "keyword" },
            "log_type" => { "type" => "keyword" },
            "cpu_percent" => { "type" => "float" },
            "cpu_count" => { "type" => "integer" },
            "cpu_frequency" => { "type" => "float" },
            "memory_total_gb" => { "type" => "float" },
            "memory_used_gb" => { "type" => "float" },
            "memory_percent" => { "type" => "float" },
            "disk_total_gb" => { "type" => "float" },
            "disk_used_gb" => { "type" => "float" },
            "disk_percent" => { "type" => "float" },
            "network_bytes_sent" => { "type" => "long" },
            "network_bytes_recv" => { "type" => "long" },
            "uptime_hours" => { "type" => "float" }
          }
        }
      }
    }
  }
  
  # Send Selenium data to dedicated index
  if [log_type] =~ /selenium_.*/ {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "selenium-automation-%{+YYYY.MM.dd}"
      template_name => "selenium-automation"
      template => {
        "index_patterns" => ["selenium-automation-*"],
        "settings" => {
          "number_of_shards" => 1,
          "number_of_replicas" => 0
        },
        "mappings" => {
          "properties" => {
            "@timestamp" => { "type" => "date" },
            "timestamp" => { "type" => "date" },
            "hostname" => { "type" => "keyword" },
            "log_type" => { "type" => "keyword" },
            "automation_type" => { "type" => "keyword" },
            "url" => { "type" => "keyword" },
            "title" => { "type" => "text" },
            "load_time_ms" => { "type" => "float" },
            "execution_time_ms" => { "type" => "float" },
            "status" => { "type" => "keyword" },
            "link_count" => { "type" => "integer" },
            "image_count" => { "type" => "integer" }
          }
        }
      }
    }
  }
  
  # Send all other logs to main index
  else {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "semaphore-logs-%{+YYYY.MM.dd}"
      template_name => "semaphore-logs"
      template => {
        "index_patterns" => ["semaphore-logs-*"],
        "settings" => {
          "number_of_shards" => 1,
          "number_of_replicas" => 0
        },
        "mappings" => {
          "properties" => {
            "@timestamp" => { "type" => "date" },
            "message" => { "type" => "text" },
            "level" => { "type" => "keyword" },
            "service_name" => { "type" => "keyword" },
            "log_type" => { "type" => "keyword" },
            "container" => {
              "properties" => {
                "name" => { "type" => "keyword" },
                "id" => { "type" => "keyword" }
              }
            }
          }
        }
      }
    }
  }
}
